package de.tudarmstadt.gdi1.project.analysis;

import de.tudarmstadt.gdi1.project.Alphabet;

/**
 * Entschlüsselung eines mit Cäsar verschlüsselten Textes
 * @author Laura
 *
 */


public class CaesarCryptanalysis implements de.tudarmstadt.gdi1.project.analysis.caesar.CaesarCryptanalysis {

	int key; //im Laufe der Klasse ermittelter Schlüssel
	
	/**
	 * Ermittelt aufgrund von Häufigkeiten von Buchstaben in Alphabet und Ciphertext den 
	 * (wahrscheinlich) verwendeten Schlüssel für die Cäsar-Verschlüsselung.
	 * @param cipher der bekannte Ciphertext
	 * @param d Distribution
	 */
	@Override
	public void knownCiphertextAttack(String cipher, Distribution d) {
		
		//häufigste Buchstaben in der gegebenen Distribution
		char mostFrequently = d.getSorted(1).get(0).toCharArray()[0];
		char secFrequently = d.getSorted(1).get(0).toCharArray()[1];
		char thirdFrequently = d.getSorted(1).get(0).toCharArray()[2];
		
		Alphabet alph = d.getAlphabet(); //aktualles Alphabet
		
		Distribution cipherDis = new Distribution(alph, cipher, 0); //Distribution zur 
		//Bestimmung der häufigsten Buchstaben im Ciphertext
		
		//Ermittlung der häufigsten Buchstaben im Ciphertext
		char mostFrequentlyInCipher = cipherDis.getSorted(1).get(0).toCharArray()[0];
		char secFrequentlyInCipher = cipherDis.getSorted(1).get(0).toCharArray()[1];
		char thirdFrequentlyInCipher = cipherDis.getSorted(1).get(0).toCharArray()[2];
		
		//Ermittlung des Schlüssels nach am häufigsten vorkommenden Buchstaben
		int key1;
		int key2;
		int key3;
		
		if (alph.getIndex(mostFrequently) >= alph.getIndex(mostFrequentlyInCipher)) 
			key1 = alph.getIndex(mostFrequently) - alph.getIndex(mostFrequentlyInCipher);
		else key1 = alph.getIndex(mostFrequentlyInCipher) - alph.getIndex(mostFrequently);
		
		if (alph.getIndex(secFrequently) >= alph.getIndex(secFrequentlyInCipher)) 
			key2 = alph.getIndex(secFrequently) - alph.getIndex(secFrequentlyInCipher);
		else key2 = alph.getIndex(secFrequentlyInCipher) - alph.getIndex(secFrequently);
		
		//Wenn der durch die am häufigsten vorkommenden Buchstaben ermittelte Schlüssel mit dem 
		//der am zweithäufigsten Buchstaben ermittelten Schlüssel übereinstimmt, ist dieser 
		//mit großer Wahrscheinlichkeit der richtige Schlüssel, womit dieser als key festgelegt
		//wird.
		//Stimmt dieser nicht damit überein, wird der durch die am dritthäufigsten vorkommenden
		//Buchstaben ermittelte Schlüssel zum Vergleich gezogen. Stimmt dieser mit key1 überein,
		//dann ist dieser wahrscheinlich der richtige Schlüssel; stimmt der mit key2 überein, so
		//ist es wahrscheinlich dieser.
		//Sind alle drei ermittelten keys unterschiedlich, so ist es dennoch am
		//wahrscheinlich, dass key1 der gesuchte Schlüssel ist, womit dieser als key festgelegt
		//wird.
		if (key1 == key2) key = key1;
		else {
			if (alph.getIndex(thirdFrequently) >= alph.getIndex(thirdFrequentlyInCipher)) 
				key3 = alph.getIndex(thirdFrequently) - alph.getIndex(thirdFrequentlyInCipher);
			else key3 = alph.getIndex(thirdFrequentlyInCipher) - alph.getIndex(thirdFrequently);
			
			if (key1 == key3) key = key1;
			else if (key2 == key3) key = key2;
			else key = key1;
		}
		
	}
	
	public void knownPlaintextAnalysis(String cipher, String plain, Alphabet alph){
		int countercipher=0;
		int counterplain=0;
		char charcipher = cipher.charAt(0);
		char charplain = cipher.charAt(0);
		while( charcipher!= alph.getChar(countercipher)){
			countercipher++;
		}
		while( charplain!= alph.getChar(counterplain)){
			counterplain++;
		}
		int caesar = countercipher-counterplain+26%26;
	}
	
	

}
