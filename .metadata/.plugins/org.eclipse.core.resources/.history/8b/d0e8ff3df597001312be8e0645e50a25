package de.tudarmstadt.gdi1.project;
import java.util.*;

/**
 * Repräsentiert ein Alphabet.
 * @author Laura
 *
 */
public class Alphabet implements de.tudarmstadt.gdi1.project.alphabet.Alphabet {

	char[] alphabet;
	
	/**
	 * Erzeugt ein Alphabet.	
	 * @param alphabet das Alphabet
	 */
	public Alphabet(char[] alphabet) 
		{
			createAlphabet(alphabet);
		}

	/**
	 * Erzeugt das Standard-Alphabet von a bis z.
	 */
	public Alphabet() {
		char[] abc = {'a', 'b', 'c', 'd', 'e', 'f', 'g', 'h', 'i', 'j', 'k', 'l', 'm', 'n', 'o', 'p', 'q', 'r', 's', 't', 'u', 'v', 'w', 'x', 'y', 'z'};
		alphabet = abc;
	}
	
	public char[] getAlphabet() {
		return alphabet;
	}

		/**
		 * Setzt das aktuelle Alphabet auf das übergebene Alphabet.
		 * @param alphabet ein übergebenes Alphabet
		 * @throws DoppelterBuchstabeException Fehler bei doppeltem Buchstaben im Array
		 */
		public void createAlphabet(char[] alphabet) {
			try { 	if (checkAlphabet(alphabet)==true) this.alphabet = alphabet; //setzt das 
					//aktuelle Alphabet auf das gegebene Alphabet bei Korrektheit
			
					else throw new DoppelterBuchstabeException(); } //wirft Exception bei 
					//fehlerhaftem Alphabet
			
			catch(DoppelterBuchstabeException dbe) { //gibt Fehlermeldung aus
				System.out.println("Illegales Alphabet: Doppelte Buchstaben enthalten!");
				this.alphabet = null;
			}
				
		}
		
		/**
		 * Überprüft das gegebene Alphabet auf doppelte Buchstaben.
		 * @param alphabet ein gegebenes Alphabet
		 * @return true, falls es korrekt ist, false wenn nicht
		 */
		public boolean checkAlphabet(char[] alphabet) {
			char[] hilf = new char[alphabet.length]; //"Hilfsalphabet", das die bereits 
			//vorgekommenen Buchstaben enthält
			
			for (int i = 0; i < alphabet.length; i++) {
				
				for (int j = 0; j < i; j++) {
					if (alphabet[i] == hilf[j]) return false; //durchsucht das bestehende 
					//Hilfsarray nach dem aktuellen Buchstaben im Alphabetarray und wenn es 
					//vorkommt, bricht er sofort ab und returnt false
				}
				hilf[i] = alphabet[i]; //wenn der aktuelle Buchstabe nicht vorkam, wird dieser 
				//an die Stelle im Hilfsarray eingefügt
			}
			
			return true; //wenn alles glattlief, wird true ausgegeben (d.h. es kamen keine
			//doppelten Buchstaben vor)
		}
		
		/**
		 * Überprüft an welcher Stelle sich der Buchstabe im Alphabet befindet und gibt den Index zurück
		 * falls der Buchstabe nicht enthalten ist wird eine Exception geworfen
		 * @param letter Buchstabe, dessen Index gesucht ist
		 * @return Index des Buchstabens
		 */
		public int getIndex(char letter){
			try{
				for(int i=0; i<alphabet.length; i++){
					if (alphabet[i] == letter) return i;
				}
				throw new ArrayIndexOutOfBoundsException();
			}
			catch(ArrayIndexOutOfBoundsException e){
				System.out.println("Illegaler Array-Zugriff Buchstabe nicht entahlten");
			}
			
			finally{
				return -1;
			}
		}
		
		/**
		 * Liefert den Buchstaben zum Index.
		 * @param index ein gegebener Index
		 * @return der zum Index passende Buchstabe
		 */
		public char getChar(int index) {
			return alphabet[index];
		}
		
		public int size() {
			return alphabet.length;
		}
	
}
