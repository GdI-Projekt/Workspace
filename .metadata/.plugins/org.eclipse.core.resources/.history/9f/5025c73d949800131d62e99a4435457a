package de.tudarmstadt.gdi1.project;

import java.util.Collection;
import java.util.List;

import de.tudarmstadt.gdi1.project.MonoalphabeticCpaNpaAnalysis;
import de.tudarmstadt.gdi1.project.CaesarAnalysis;
import de.tudarmstadt.gdi1.project.DistributionC;
import de.tudarmstadt.gdi1.project.VigenereChiffre;
import de.tudarmstadt.gdi1.project.Polyalphabetic;
import de.tudarmstadt.gdi1.project.KeywordMonoalphabetic;
import de.tudarmstadt.gdi1.project.CaesarChiffre;
import de.tudarmstadt.gdi1.project.Monoalphabetic;
import de.tudarmstadt.gdi1.project.alphabet.Alphabet;
import de.tudarmstadt.gdi1.project.alphabet.Dictionary;
import de.tudarmstadt.gdi1.project.alphabet.Distribution;
import de.tudarmstadt.gdi1.project.analysis.ValidateDecryptionOracle;
import de.tudarmstadt.gdi1.project.analysis.caeser.CaesarCryptanalysis;
import de.tudarmstadt.gdi1.project.analysis.monoalphabetic.Individual;
import de.tudarmstadt.gdi1.project.analysis.monoalphabetic.MonoalphabeticCpaNpaCryptanalysis;
import de.tudarmstadt.gdi1.project.analysis.monoalphabetic.MonoalphabeticCribCryptanalysis;
import de.tudarmstadt.gdi1.project.analysis.monoalphabetic.MonoalphabeticKnownCiphertextCryptanalysis;
import de.tudarmstadt.gdi1.project.analysis.vigenere.VigenereCryptanalysis;
import de.tudarmstadt.gdi1.project.cipher.enigma.Enigma;
import de.tudarmstadt.gdi1.project.cipher.enigma.PinBoard;
import de.tudarmstadt.gdi1.project.cipher.enigma.ReverseRotor;
import de.tudarmstadt.gdi1.project.cipher.enigma.Rotor;
import de.tudarmstadt.gdi1.project.cipher.substitution.SubstitutionCipher;
import de.tudarmstadt.gdi1.project.cipher.substitution.monoalphabetic.Caesar;
import de.tudarmstadt.gdi1.project.cipher.substitution.monoalphabetic.KeywordMonoalphabeticCipher;
import de.tudarmstadt.gdi1.project.cipher.substitution.monoalphabetic.MonoalphabeticCipher;
import de.tudarmstadt.gdi1.project.cipher.substitution.polyalphabetic.PolyalphabeticCipher;
import de.tudarmstadt.gdi1.project.cipher.substitution.polyalphabetic.Vigenere;
import de.tudarmstadt.gdi1.project.utils.Utils;

public class FactoryIM implements Factory {

	@Override
	public Distribution getDistributionInstance(Alphabet source, String text, int ngramsize) {
		//Casten von source
		de.tudarmstadt.gdi1.project.Alphabet source1 = (de.tudarmstadt.gdi1.project.Alphabet)source;
		
		DistributionC d = new DistributionC(source1, text, ngramsize);
		
		return (Distribution)d;
	}

	@Override
	public Alphabet getAlphabetInstance(Collection<Character> characters) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Dictionary getDictionaryInstance(Alphabet alphabet, String text) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public MonoalphabeticCipher getMonoalphabeticCipherInstance(
			Alphabet source, Alphabet dest) {
		//source & dest Casten:
		de.tudarmstadt.gdi1.project.Alphabet source1 = (de.tudarmstadt.gdi1.project.Alphabet)source;
		de.tudarmstadt.gdi1.project.Alphabet dest1 = (de.tudarmstadt.gdi1.project.Alphabet) dest;
		//Objekt vom Typ Monoalphabetic (Klasse nicht das Interface MonoalphabeticCipher)
		Monoalphabetic m = new Monoalphabetic(dest1, source1);
		//Gibt m gecastet zu MonoalphabeticCipher zurück
		return (MonoalphabeticCipher) m;
		
	}

	@Override
	public Caesar getCaesarInstance(int key, Alphabet alphabet) {
		de.tudarmstadt.gdi1.project.Alphabet alphabet1 = (de.tudarmstadt.gdi1.project.Alphabet) alphabet;
		CaesarChiffre c = new CaesarChiffre(alphabet1, key);
		
		return (Caesar) c;
	}

	@Override
	public KeywordMonoalphabeticCipher getKeywordMonoalphabeticCipherInstance(
			String key, Alphabet alphabet) {
		//alphabet nach Alphabet(passend zur Klasse) casten
		de.tudarmstadt.gdi1.project.Alphabet alphabet1 = (de.tudarmstadt.gdi1.project.Alphabet) alphabet;
		
		KeywordMonoalphabetic k = new KeywordMonoalphabetic(alphabet1, key);
		
		return (KeywordMonoalphabeticCipher) k;
	}
	
	@Override
	public PolyalphabeticCipher getPolyalphabeticCipherInstance(
			Alphabet source, Alphabet[] dest) {
		//Casten:
		de.tudarmstadt.gdi1.project.Alphabet source1 = (de.tudarmstadt.gdi1.project.Alphabet) source;
		de.tudarmstadt.gdi1.project.Alphabet[] dest1 = (de.tudarmstadt.gdi1.project.Alphabet[]) dest;
		//Objekt vom Polyalphabetic 
		Polyalphabetic p = new Polyalphabetic(source1, dest1);
		//Gecastet zurückgeben
		return (PolyalphabeticCipher)p;
	}
	

	@Override
	public Vigenere getVigenereCipherInstance(String key, Alphabet alphabet) {
		//Casten:
		de.tudarmstadt.gdi1.project.Alphabet alphabet1 = (de.tudarmstadt.gdi1.project.Alphabet) alphabet;
		//Objekt vom Typ VigenereChiffre
		VigenereChiffre v = new VigenereChiffre(key, alphabet1);
		//Objekt gecastet zurückgeben
		return (Vigenere)v;
	}

	@Override
	public CaesarCryptanalysis getCaesarCryptanalysisInstance() {
		CaesarAnalysis c = new CaesarAnalysis();
		
		return (CaesarCryptanalysis) c;
	}

	@Override
	public MonoalphabeticCpaNpaCryptanalysis getMonoalphabeticCpaNpaCryptanalysis() {
		MonoalphabeticCpaNpaAnalysis m = new MonoalphabeticCpaNpaAnalysis();
		return (MonoalphabeticCpaNpaCryptanalysis) m;
	}

	@Override
	public MonoalphabeticCribCryptanalysis getMonoalphabeticCribCryptanalysisInstance() {
		
		return null;
	}

	@Override
	public MonoalphabeticKnownCiphertextCryptanalysis getMonoalphabeticKnownCiphertextCryptanalysisInstance() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public VigenereCryptanalysis getVigenereCryptanalysisInstance() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Utils getUtilsInstance() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Enigma getEnigmaInstance(List<Rotor> rotors, PinBoard pinboard,
			ReverseRotor reverseRotor) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public PinBoard getPinBoardInstance(Alphabet source, Alphabet destination) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Rotor getRotorInstance(Alphabet entryAlph, Alphabet exitAlph,
			int startPosition) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ReverseRotor getReverseRotatorInstance(Alphabet entryAlph,
			Alphabet exitAlph) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Class<? extends SubstitutionCipher> getAbstractSubstitutionCipherClass() {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public ValidateDecryptionOracle getValidateDecryptionOracle(
			Distribution distribution, Dictionary dictionary) {
		// TODO Auto-generated method stub
		return null;
	}

	@Override
	public Individual getIndividualInstance(Alphabet alphabet, double fitness) {
		// TODO Auto-generated method stub
		return null;
	}



}
