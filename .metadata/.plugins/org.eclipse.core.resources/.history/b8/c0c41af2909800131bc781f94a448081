package de.tudarmstadt.gdi1.project;

import de.tudarmstadt.gdi1.project.alphabet.Alphabet;
import de.tudarmstadt.gdi1.project.alphabet.Dictionary;
import de.tudarmstadt.gdi1.project.alphabet.Distribution;
import de.tudarmstadt.gdi1.project.analysis.EncryptionOracle;
import de.tudarmstadt.gdi1.project.cipher.substitution.monoalphabetic.MonoalphabeticCipher;

/**
 * Repräsentiert einen Angreifer auf eine monoalphabetische Verschlüsselung, wobei der 
 * Angreifer sowohl Klar- als auch Chiffretext besitzt und sich sogar beliebige Klar- und
 * dazugehörige Chiffretexte aussuchen darf.
 * @author Laura
 *
 */
public class MonoalphabeticCpaNpaCryptanalysis implements
de.tudarmstadt.gdi1.project.analysis.monoalphabetic.MonoalphabeticCpaNpaCryptanalysis {

	//Verweist auf knownPlaintextAttack(String ciphertext, String plaintext, Alphabet alphabet)
	@Override
	public Object knownPlaintextAttack(String ciphertext, String plaintext,
			Distribution distribution) {
		return knownPlaintextAttack(ciphertext, plaintext, distribution.getAlphabet());
	}

	//Verweist auf knownPlaintextAttack(String ciphertext, String plaintext, Alphabet alphabet)
	@Override
	public Object knownPlaintextAttack(String ciphertext, String plaintext,
			Distribution distribution, Dictionary dictionary) {
		return knownPlaintextAttack(ciphertext, plaintext, dictionary.getAlphabet());
	}

	//Ausreichend
	@Override
	public char[] knownPlaintextAttack(String ciphertext, String plaintext,
			Alphabet alphabet) {
		
		char[] key = new char[alphabet.size()];
		char[] cipherArray = ciphertext.toCharArray();
		char[] plainArray = plaintext.toCharArray();
		
		for (int i = 0; i < key.length; i++) {
			key[i] = ' '; //füllt das Ergebnisarray mit Leerzeichen auf
		}
		
		for (int i = 0; i < cipherArray.length; i++) {
			int plainIndex = alphabet.getIndex(plainArray[i]);
			int cipherIndex = alphabet.getIndex(cipherArray[i]);
			int keyIndex;
			if (plainIndex < cipherIndex) keyIndex = cipherIndex - plainIndex;
			else keyIndex = plainIndex - cipherIndex;
			key[plainIndex] = alphabet.getChar(keyIndex);
		}
		
		return key;
	}

	@Override
	public char[] chosenPlaintextAttack(
			EncryptionOracle<MonoalphabeticCipher> oracle, Alphabet alphabet) {
		// TODO Auto-generated method stub
		return null;
	}

}
